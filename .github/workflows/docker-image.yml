name: Create Lambda Layer

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        architecture: [x86_64, arm64]
        python-version: ['3.11', '3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: ${{ matrix.architecture }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build the Docker image
      run: |
        docker buildx build --load --platform linux/${{ matrix.architecture }} --file Dockerfile.python.${{ matrix.python-version }}.${{ matrix.architecture }} --tag pyodbc-mssql-${{ matrix.architecture }} .

    - name: Create Container from Image
      run: |
        docker run --platform linux/${{ matrix.architecture }} --rm --volume $(pwd):/tmp pyodbc-mssql-${{ matrix.architecture }} cp /layer.zip /tmp/pyodbc-mssql-python-${{ matrix.python-version }}-${{ matrix.architecture }}.zip

    - name: Run Tests
      run: |
        docker run --platform linux/${{ matrix.architecture }} -d --name tester --entrypoint tail pyodbc-mssql-${{ matrix.architecture }} -f /dev/null
        docker cp tests/test_pyodbc.py tester:/tmp
        docker exec tester bash -c "pip install pytest"
        docker exec tester bash -c "pytest /tmp/test_pyodbc.py"

    - name: Upload layer artifact
      uses: actions/upload-artifact@v4
      with:
        name: pyodbc-mssql-python-${{ matrix.python-version }}-${{ matrix.architecture }}
        path: pyodbc-mssql-python-${{ matrix.python-version }}-${{ matrix.architecture }}.zip
        retention-days: 1

  create-release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4

      - name: List artifacts
        run: find

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "pyodbc-mssql-python-*/*.zip"
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
          body: |
            # Layer Package Release

            I'm pleased to announce the latest build of my pyodbc layers for SQL Server connectivity is here. Please select the appropriate package based on your Lambda runtime environment:

            **pyodbc-mssql-python-3.11-arm64.zip**: For Python 3.11 on ARM64 Lambda environments.
            **pyodbc-mssql-python-3.11-x86_64.zip**: For Python 3.11 on x86_64 Lambda environments.
            **pyodbc-mssql-python-3.12-arm64.zip**: For Python 3.12 on ARM64 Lambda environments.
            **pyodbc-mssql-python-3.12-x86_64.zip**: For Python 3.12 on x86_64 Lambda environments.

            Choose the package matching your Python version and architecture for optimal performance.

            Thank you for using our layers to power your serverless applications!
